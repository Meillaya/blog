---
interface Props {
  coverImage: ImageMetadata | string;
  title: string;
  author: string;
  rating: number;
  altText?: string;
  alignment?: 'left' | 'center' | 'right';
}

import { Image } from 'astro:assets';
import { getImage } from 'astro:assets';

const { coverImage, title, author, rating, altText, alignment = 'left' } = Astro.props;

// Determine if we're using a string path or an ImageMetadata object
const isImagePath = typeof coverImage === 'string';
---

<div class={`book-review alignment-${alignment}`}>
  <div class="book-header">
    <div class="book-cover">
      {isImagePath ? (
        <img 
          src={coverImage} 
          alt={altText || `${title} book cover`} 
          width={300} 
          height={450}
          class="cover-image"
        />
      ) : (
        <Image 
          src={coverImage} 
          alt={altText || `${title} book cover`} 
          width={300} 
          height={450}
          class="cover-image"
        />
      )}
      <div class="book-info">
        <h3 class="book-title">{title}</h3>
        <p class="book-author">by {author}</p>
        <div class="book-rating">
          {Array(5).fill(0).map((_, i) => (
            <span class={`star ${i < rating ? 'filled' : 'empty'}`}>â˜…</span>
          ))}
        </div>
      </div>
    </div>
    <div class="book-intro">
      <slot name="intro" />
    </div>
  </div>
  <div class="book-content">
    <slot />
  </div>
</div>

<style>
  .book-review {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin: 2rem 0;
    padding: 1.5rem;
    background-color: var(--color-bg-secondary, #FFF1E7);
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  }

  .book-header {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .book-cover {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .cover-image {
    border-radius: 8px;
    box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3);
    max-width: 100%;
    height: auto;
    object-fit: cover;
  }

  .book-info {
    text-align: center;
    width: 100%;
  }

  .book-title {
    margin: 0.5rem 0 0.25rem;
    font-size: 1.5rem;
    font-weight: 700;
  }

  .book-author {
    margin: 0 0 0.5rem;
    font-size: 1.1rem;
    font-style: italic;
    color: var(--color-text-secondary, #6c757d);
  }

  .book-rating {
    display: flex;
    justify-content: center;
    gap: 0.25rem;
    font-size: 1.25rem;
  }

  .star {
    color: #d1d1d1;
  }

  .star.filled {
    color: #ffc107;
  }

  .book-intro {
    font-size: 1.1rem;
    line-height: 1.6;
  }

  .book-content {
    font-size: 1.1rem;
    line-height: 1.6;
    width: 100%;
  }

  /* Responsive layout for larger screens */
  @media (min-width: 768px) {
    .book-header {
      flex-direction: row;
      align-items: flex-start;
    }

    .book-cover {
      flex: 0 0 300px;
    }

    .book-intro {
      flex: 1;
      padding-left: 1.5rem;
    }

    /* Alignment variations */
    .alignment-left .book-header {
      justify-content: flex-start;
    }

    .alignment-center .book-header {
      justify-content: center;
    }

    .alignment-center .book-intro {
      flex: 0 1 auto;
      max-width: 50%;
    }

    .alignment-right .book-header {
      flex-direction: row-reverse;
    }

    .alignment-right .book-intro {
      padding-left: 0;
      padding-right: 1.5rem;
    }
  }
</style> 