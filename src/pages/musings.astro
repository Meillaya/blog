---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const musingsPosts = await getCollection('musings');

musingsPosts.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime());
---

<Layout title="Musings & Reflections">
    <div class="container">
        <header class="page-header">
            <h1 class="page-title">Musings & Reflections</h1>
            <p class="page-description">A collection of thoughts, ideas, and explorations</p>
        </header>
        
        <ul class="musings-list">
            {musingsPosts.map((post) => (
            <li class="musings-item">
                <a href={`/musings/${post.slug}`} class="musings-link">
                    <div class="musings-content">
                        <h2 class="musings-title">{post.data.title}</h2>
                        <time class="musings-date" datetime={post.data.publishDate.toISOString()}>
                            {new Date(post.data.publishDate).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            })}
                        </time>
                        <p class="musings-description">{post.data.description}</p>
                        <span class="read-more">Continue reading <span class="arrow">â†’</span></span>
                    </div>
                    <div class="musings-preview-wrapper">
                        <div class="musings-preview" id={`preview-${post.slug}`}>
                            <div class="preview-loading">
                                <div class="loading-spinner"></div>
                                <div class="loading-text">Loading preview...</div>
                            </div>
                        </div>
                    </div>
                </a>
            </li>
            ))}
        </ul>
    </div>
</Layout>

<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1.5rem;
    }

    .page-header {
        margin-bottom: 3rem;
        text-align: center;
        position: relative;
        padding-bottom: 1.5rem;
    }

    .page-header::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 80px;
        height: 3px;
        background: var(--color-primary, #6a2fb8);
        border-radius: 3px;
    }

    .page-title {
        margin-bottom: 0.5rem;
        font-size: 2.75rem;
        color: var(--color-heading, #333);
        font-weight: 700;
        letter-spacing: -0.5px;
    }

    .page-description {
        font-size: 1.2rem;
        color: var(--color-text-light, #666);
        max-width: 600px;
        margin: 0 auto;
    }

    .musings-list {
        list-style: none;
        padding: 0;
        margin: 0;
        display: grid;
        grid-template-columns: 1fr;
        gap: 2rem;
    }

    .musings-item {
        position: relative;
        transition: transform 0.3s ease;
    }
    
    .musings-link {
        display: flex;
        text-decoration: none;
        color: inherit;
        border-radius: 16px;
        overflow: hidden;
        background: var(--color-card-bg, #FFF1E7);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        height: 100%;
    }

    .musings-link:hover {
        transform: translateY(-8px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.12);
    }

    .musings-content {
        flex: 1;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        position: relative;
        z-index: 2;
    }

    .musings-title {
        margin: 0 0 0.75rem;
        font-size: 1.6rem;
        color: var(--color-heading, #333);
        font-weight: 700;
        line-height: 1.3;
        transition: color 0.3s ease;
    }

    .musings-link:hover .musings-title {
        color: var(--color-primary, #6a2fb8);
    }

    .musings-date {
        font-size: 0.9rem;
        color: var(--color-text-light, #666);
        margin-bottom: 1.25rem;
        display: block;
        font-weight: 500;
    }

    .musings-description {
        margin: 0 0 1.75rem;
        line-height: 1.7;
        color: var(--color-text, #444);
        flex-grow: 1;
        font-size: 1.05rem;
    }

    .read-more {
        font-size: 1rem;
        font-weight: 600;
        color: var(--color-primary, #6a2fb8);
        display: inline-flex;
        align-items: center;
        transition: all 0.3s ease;
    }

    .arrow {
        display: inline-block;
        margin-left: 0.25rem;
        transition: transform 0.3s ease;
    }

    .musings-link:hover .read-more .arrow {
        transform: translateX(6px);
    }

    .musings-preview-wrapper {
        width: 220px;
        height: 220px;
        position: relative;
        overflow: visible;
        flex-shrink: 0;
        border-left: 1px solid rgba(0, 0, 0, 0.05);
        background: var(--color-bg-alt, #FFF1E7);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 0 16px 16px 0;
    }

    .musings-preview-wrapper::before {
        content: "";
        position: absolute;
        width: 200px;
        height: 200px;
        border-radius: 50%;
        border: 2px dashed var(--color-primary, #6a2fb8);
        opacity: 0.3;
        animation: rotate 50s linear infinite;
        z-index: 0;
    }

    .musings-preview-wrapper::after {
        content: "";
        position: absolute;
        width: 210px;
        height: 210px;
        border-radius: 50%;
        border: 1px solid var(--color-primary, #6a2fb8);
        opacity: 0.25;
        animation: pulse 3s ease-in-out infinite;
        z-index: 0;
    }

    @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    @keyframes pulse {
        0% { transform: scale(1); opacity: 0.25; }
        50% { transform: scale(1.05); opacity: 0.35; }
        100% { transform: scale(1); opacity: 0.25; }
    }

    .musings-preview {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .preview-loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 180px;
        height: 180px;
        border-radius: 50%;
        background: var(--color-bg-alt, #FFF1E7);
        box-shadow: 0 8px 25px rgba(106, 47, 184, 0.15);
        border: 4px solid rgba(255, 255, 255, 0.7);
    }

    .loading-spinner {
        width: 36px;
        height: 36px;
        border: 3px solid rgba(106, 47, 184, 0.1);
        border-radius: 50%;
        border-top-color: var(--color-primary, #6a2fb8);
        animation: spin 1s ease-in-out infinite;
        margin-bottom: 10px;
    }

    .loading-text {
        font-size: 0.85rem;
        color: var(--color-text-light, #666);
        text-align: center;
        max-width: 80%;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }

    .musings-preview img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.6s ease, filter 0.6s ease;
        border-radius: 0;
    }

    .musings-link:hover .musings-preview img {
        transform: scale(1.08);
        filter: brightness(1.05);
    }

    .preview-fallback {
        width: 180px;
        height: 180px;
        padding: 0;
        border-radius: 50%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: var(--color-bg-alt, #FFF1E7);
        color: var(--color-text-light, #666);
        font-size: 0.9rem;
        text-align: center;
        box-shadow: 0 8px 25px rgba(106, 47, 184, 0.15);
        border: 4px solid rgba(255, 255, 255, 0.7);
    }

    .preview-fallback::before {
        content: "ðŸ“„";
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
    }

    @media (min-width: 768px) {
        .musings-list {
            grid-template-columns: repeat(auto-fill, minmax(600px, 1fr));
        }
    }

    @media (max-width: 767px) {
        .page-title {
            font-size: 2rem;
        }
        
        .musings-link {
            flex-direction: column;
        }
        
        .musings-preview-wrapper {
            width: 100%;
            height: 160px;
            border-left: none;
            border-top: 1px solid rgba(0, 0, 0, 0.05);
            order: -1;
            border-radius: 16px 16px 0 0;
        }
        
        .musings-content {
            padding: 1.5rem;
        }
        
        .preview-structure {
            width: 140px;
            height: 140px;
        }
        
        .musings-preview-wrapper::before {
            width: 160px;
            height: 160px;
        }
        
        .musings-preview-wrapper::after {
            width: 170px;
            height: 170px;
        }
        
        .preview-loading {
            width: 140px;
            height: 140px;
        }
        
        .preview-fallback {
            width: 140px;
            height: 140px;
        }
    }

    /* Revamped preview styles */
    .preview-structure {
        position: relative;
        width: 180px;
        height: 180px;
        overflow: hidden;
        border-radius: 50%;
        box-shadow: 0 8px 25px rgba(106, 47, 184, 0.15);
        border: 4px solid rgba(255, 255, 255, 0.7);
        transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        transform-style: preserve-3d;
        perspective: 1000px;
        z-index: 1;
        background: var(--color-card-bg, #FFF1E7);
        margin: 0 auto;
    }

    .musings-link:hover .preview-structure {
        transform: scale(1.05) translateY(-5px) rotateY(10deg);
        box-shadow: 0 15px 35px rgba(106, 47, 184, 0.25);
        border-color: rgba(255, 255, 255, 0.9);
    }
    
    .preview-structure::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, rgba(106, 47, 184, 0.3), transparent);
        z-index: 2;
        opacity: 0.5;
        transition: opacity 0.3s ease;
        border-radius: 50%;
        pointer-events: none;
    }

    .musings-link:hover .preview-structure::before {
        opacity: 0.7;
    }

    /* Overlay gradient for text readability */
    .preview-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 40%;
        background: linear-gradient(to bottom, rgba(255,241,231,0), rgba(106, 47, 184, 0.3));
        pointer-events: none;
        z-index: 1;
        border-radius: 0 0 50% 50%;
    }

    /* Text preview styles */
    .text-preview {
        height: 100%;
        width: 100%;
        overflow: hidden;
        position: relative;
        background: transparent;
        display: flex;
        flex-direction: column;
        border-radius: 50%;
    }

    .text-preview::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 40%;
        background: linear-gradient(to bottom, rgba(255,241,231,0), rgba(255,241,231,0.8));
        pointer-events: none;
        z-index: 2;
    }

    .text-preview-content {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        padding: 1.5rem 1.25rem 0.75rem;
        height: 100%;
        width: 100%;
        overflow: hidden;
    }

    .text-preview-title {
        font-weight: 600;
        margin-bottom: 0.75rem;
        color: var(--color-primary, #6a2fb8);
        font-size: 0.9rem;
        line-height: 1.1;
        position: relative;
        text-align: center;
        width: 100%;
    }

    .text-preview-title::after {
        content: "";
        position: absolute;
        bottom: -6px;
        left: 50%;
        transform: translateX(-50%);
        width: 30px;
        height: 2px;
        background: var(--color-primary, #6a2fb8);
        border-radius: 2px;
    }

    .text-preview-body {
        font-size: 0.75rem;
        line-height: 1.4;
        overflow: hidden;
        text-align: center;
        width: 85%;
        max-width: 140px;
        margin: 0;
        font-weight: 400;
        color: var(--color-text, #444);
        display: -webkit-box;
        -webkit-line-clamp: 8;
        -webkit-box-orient: vertical;
        word-break: break-word;
        hyphens: auto;
    }

    /* Better image handling in previews */
    .preview-structure img {
        object-fit: cover;
        width: 100%;
        height: 100%;
        transition: transform 0.5s ease;
    }

    .musings-link:hover .preview-structure img {
        transform: scale(1.1);
    }

    /* SVG fallback in previews */
    .svg-fallback {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        width: 100%;
        color: var(--color-primary, #6a2fb8);
        font-size: 0.9rem;
    }

    .svg-fallback::before {
        content: "ðŸ“Š";
        font-size: 2rem;
        margin-bottom: 0.5rem;
        display: block;
    }

    /* Decorative elements */
    .musings-preview-wrapper {
        width: 220px;
        height: 220px;
        position: relative;
        overflow: visible;
        flex-shrink: 0;
        border-left: 1px solid rgba(0, 0, 0, 0.05);
        background: var(--color-bg-alt, #FFF1E7);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 0 16px 16px 0;
    }

    .musings-preview-wrapper::before {
        content: "";
        position: absolute;
        width: 200px;
        height: 200px;
        border-radius: 50%;
        border: 2px dashed var(--color-primary, #6a2fb8);
        opacity: 0.3;
        animation: rotate 50s linear infinite;
        z-index: 0;
    }

    .musings-preview-wrapper::after {
        content: "";
        position: absolute;
        width: 210px;
        height: 210px;
        border-radius: 50%;
        border: 1px solid var(--color-primary, #6a2fb8);
        opacity: 0.25;
        animation: pulse 3s ease-in-out infinite;
        z-index: 0;
    }

    @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    @keyframes pulse {
        0% { transform: scale(1); opacity: 0.25; }
        50% { transform: scale(1.05); opacity: 0.35; }
        100% { transform: scale(1); opacity: 0.25; }
    }

    /* Shining effect for preview */
    .preview-structure::after {
        content: "";
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(
            45deg,
            rgba(255, 255, 255, 0) 0%,
            rgba(255, 255, 255, 0.1) 45%,
            rgba(255, 255, 255, 0.4) 50%,
            rgba(255, 255, 255, 0.1) 55%,
            rgba(255, 255, 255, 0) 100%
        );
        transform: rotate(45deg);
        animation: shine 5s infinite ease-in-out;
        z-index: 3;
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.5s ease;
    }

    .musings-link:hover .preview-structure::after {
        opacity: 1;
    }

    @keyframes shine {
        0% { transform: rotate(45deg) translateX(-150%); }
        100% { transform: rotate(45deg) translateX(150%); }
    }

    /* Iframe Preview Styles */
    .iframe-preview-wrapper {
        width: 100%;
        height: 100%;
        overflow: hidden;
        border-radius: 50%;
        position: relative;
    }

    .iframe-preview {
        border: none;
        transform-origin: top left;
        position: absolute;
        top: 0;
        left: 0;
        width: 250%;
        height: 250%;
        transform: scale(0.4);
    }

    .iframe-preview-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 40%;
        background: linear-gradient(to bottom, rgba(255,241,231,0), rgba(106, 47, 184, 0.4));
        pointer-events: none;
        z-index: 10;
        border-radius: 0 0 50% 50%;
    }
</style>

<script>
  // Type declarations
  declare module 'html-to-image' {
    export function toPng(node: HTMLElement, options?: any): Promise<string>;
    export function toJpeg(node: HTMLElement, options?: any): Promise<string>;
    export function toBlob(node: HTMLElement, options?: any): Promise<Blob>;
    export function toPixelData(node: HTMLElement, options?: any): Promise<Uint8ClampedArray>;
    export function toSvg(node: HTMLElement, options?: any): Promise<string>;
    export function toCanvas(node: HTMLElement, options?: any): Promise<HTMLCanvasElement>;
  }

  // Display debug message for all preview containers
  document.querySelectorAll('.musings-preview').forEach(preview => {
    preview.innerHTML = '<div class="preview-loading"><div class="loading-spinner"></div><div class="loading-text">Loading preview...</div></div>';
  });

  // Configuration options
  const config = {
    debug: false, // Set to true for detailed console logs
    preferIframe: true, // Prioritize iframe previews over image previews
    fallbackToImage: true, // Fall back to image if iframe fails
    fallbackToText: true, // Fall back to text if both iframe and image fail
  };

  // Debug logger
  function log(...args) {
    if (config.debug) {
      console.log(...args);
    }
  }

  // Import html-to-image dynamically with a fallback
  import('html-to-image')
    .then((htmlToImage) => {
      log('html-to-image loaded successfully');
      
      // Function to generate preview for a post
      async function generatePreview(slug) {
        log(`Generating preview for: ${slug}`);
        const previewContainer = document.getElementById(`preview-${slug}`);
        
        try {
          if (!previewContainer) {
            throw new Error(`Preview container not found for ${slug}`);
          }
          
          // Update loading message
          previewContainer.innerHTML = '<div class="preview-loading"><div class="loading-spinner"></div><div class="loading-text">Fetching content...</div></div>';
          
          // Use current origin to ensure we have the full URL
          const origin = window.location.origin;
          const url = `${origin}/musings/${slug}`;
          log(`Fetching content from: ${url}`);
          
          // Fetch the post content
          const response = await fetch(url, {
            headers: {
              'Accept': 'text/html'
            },
            credentials: 'same-origin'
          });
          if (!response.ok) {
            throw new Error(`Failed to fetch post content: ${response.status}`);
          }
          
          const html = await response.text();
          log(`Content fetched for ${slug}, length: ${html.length}`);
          
          // Update loading message again
          if (previewContainer) {
            previewContainer.innerHTML = '<div class="preview-loading"><div class="loading-spinner"></div><div class="loading-text">Processing content...</div></div>';
          }
          
          // Create a temporary container to render the post
          const tempContainer = document.createElement('div');
          tempContainer.innerHTML = html;
          tempContainer.style.position = 'absolute';
          tempContainer.style.left = '-9999px';
          tempContainer.style.width = '800px';
          tempContainer.style.background = 'var(--color-card-bg, #FFF1E7)';
          document.body.appendChild(tempContainer);
          
          // Find the article element in the fetched content
          const articleElement = tempContainer.querySelector('article');
          
          if (!articleElement) {
            log('Article element not found, attempting to find main content area');
            // Try to find alternative content containers
            const mainElement = tempContainer.querySelector('main');
            const contentElement = tempContainer.querySelector('.content') || 
                                  tempContainer.querySelector('.post-content') || 
                                  tempContainer.querySelector('.entry-content');
            
            if (mainElement) {
              log('Found main element, using as content source');
              // Create text preview first as a fallback
              let textContent = mainElement.textContent || '';
              textContent = textContent.trim().substring(0, 300) + (textContent.length > 300 ? '...' : '');
              if (textContent && previewContainer) {
                log('Creating text preview from main element');
                createTextPreview(previewContainer, textContent);
              }
              
              // Try to generate a visual preview
              await generateVisualPreview(mainElement, previewContainer, slug);
              
              // Clean up
              document.body.removeChild(tempContainer);
              return;
            } else if (contentElement) {
              log('Found content element, using as content source');
              // Create text preview first as a fallback
              let textContent = contentElement.textContent || '';
              textContent = textContent.trim().substring(0, 300) + (textContent.length > 300 ? '...' : '');
              if (textContent && previewContainer) {
                log('Creating text preview from content element');
                createTextPreview(previewContainer, textContent);
              }
              
              // Try to generate a visual preview
              await generateVisualPreview(contentElement, previewContainer, slug);
              
              // Clean up
              document.body.removeChild(tempContainer);
              return;
            }
            
            // If we got here, we couldn't find suitable content
            log('No suitable content elements found');
            throw new Error('Article element not found in fetched content');
          }
          
          // If we found an article element, process it
          log('Article element found, processing');
          
          // Extract text content for fallback
          let textContent = '';
          const contentElement = articleElement.querySelector('.content');
          if (contentElement) {
            textContent = contentElement.textContent || '';
          } else {
            textContent = articleElement.textContent || '';
          }
          
          // Trim and format text content
          textContent = textContent.trim().substring(0, 300) + (textContent.length > 300 ? '...' : '');
          
          // Create text preview as fallback
          if (previewContainer && textContent) {
            log('Creating text preview from article');
            createTextPreview(previewContainer, textContent);
          }
          
          // Try to generate a visual preview
          await generateVisualPreview(articleElement, previewContainer, slug);
          
          // Clean up
          if (document.body.contains(tempContainer)) {
            document.body.removeChild(tempContainer);
          }
        } catch (error) {
          log(`Error generating preview for ${slug}:`, error);
          
          if (previewContainer && document.body.contains(previewContainer)) {
            previewContainer.innerHTML = '<div class="preview-fallback">Preview not available</div>';
          }
        }
      }

      // Generate previews for all posts when they become visible
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const slug = entry.target.id.replace('preview-', '');
            generatePreview(slug);
            observer.unobserve(entry.target);
          }
        });
      }, { rootMargin: '200px' });

      // Observe all preview containers
      document.querySelectorAll('.musings-preview').forEach(preview => {
        observer.observe(preview);
      });

      // Function to generate a visual preview using html-to-image
      async function generateVisualPreview(element, container, slug) {
        try {
          log('Generating visual preview');
          
          // Style the element for better capture
          const elementToCapture = element.cloneNode(true) as HTMLElement;
          elementToCapture.style.width = '800px';
          elementToCapture.style.maxHeight = '800px';
          elementToCapture.style.padding = '30px';
          elementToCapture.style.background = 'var(--color-card-bg, #FFF1E7)';
          elementToCapture.style.overflow = 'hidden';
          elementToCapture.style.display = 'block';
          elementToCapture.style.fontSize = '16px';
          
          // Fix image paths and enhance styling
          const images = elementToCapture.querySelectorAll('img');
          const origin = window.location.origin;
          
          images.forEach(img => {
            // Fix relative image paths
            if (img.src.startsWith('/')) {
              img.src = origin + img.src;
            }
            
            // Enhance image visibility
            img.style.maxWidth = '100%';
            img.style.height = 'auto';
            img.style.display = 'block';
            img.style.margin = '10px 0';
            img.style.borderRadius = '6px';
            
            // Set crossorigin attribute
            img.crossOrigin = 'anonymous';
          });
          
          // Enhance text elements
          const headings = elementToCapture.querySelectorAll('h1, h2, h3, h4, h5, h6');
          headings.forEach(heading => {
            (heading as HTMLElement).style.color = 'var(--color-heading, #333)';
            (heading as HTMLElement).style.margin = '15px 0 8px';
            (heading as HTMLElement).style.fontWeight = 'bold';
          });
          
          const paragraphs = elementToCapture.querySelectorAll('p');
          paragraphs.forEach(p => {
            (p as HTMLElement).style.margin = '8px 0';
            (p as HTMLElement).style.lineHeight = '1.6';
          });
          
          // Create a temporary container for the styled element
          const tempContainer = document.createElement('div');
          tempContainer.style.position = 'absolute';
          tempContainer.style.left = '-9999px';
          tempContainer.style.top = '0';
          tempContainer.style.opacity = '0';
          tempContainer.appendChild(elementToCapture);
          document.body.appendChild(tempContainer);
          
          // Allow time for images to load
          await new Promise(resolve => setTimeout(resolve, 300));
          
          // Add a timeout to ensure we don't get stuck
          const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Image generation timed out')), 10000);
          });
          
          // Try iframe-based preview first
          if (config.preferIframe) {
            try {
              log('Attempting iframe preview first');
              const iframeSuccess = await tryIframePreview(slug, container);
              if (iframeSuccess) {
                // If iframe preview succeeded, we're done
                document.body.removeChild(tempContainer);
                return true;
              }
            } catch (iframeError) {
              log('Iframe preview failed, falling back to image generation:', iframeError);
            }
          }
            
          // Only proceed with image generation if fallback is enabled
          if (!config.fallbackToImage) {
            document.body.removeChild(tempContainer);
            throw new Error('Iframe preview failed and image fallback disabled');
          }
          
          // Generate the image using html-to-image
          const dataUrl = await Promise.race([
            htmlToImage.toPng(elementToCapture, {
              quality: 0.9,
              width: 800,
              height: 800,
              canvasWidth: 800,
              canvasHeight: 800,
              pixelRatio: 1,
              skipAutoScale: true,
              backgroundColor: 'var(--color-card-bg, #FFF1E7)'
            }) as Promise<string>,
            timeoutPromise
          ]);
          
          // Clean up the temporary container
          document.body.removeChild(tempContainer);
          
          if (container && document.body.contains(container)) {
            // Create the preview structure
            const previewStructure = document.createElement('div');
            previewStructure.className = 'preview-structure';
            
            // Create a wrapper for the image with circular mask
            const imgWrapper = document.createElement('div');
            imgWrapper.style.width = '100%';
            imgWrapper.style.height = '100%';
            imgWrapper.style.overflow = 'hidden';
            imgWrapper.style.borderRadius = '50%';
            imgWrapper.style.position = 'relative';
            
            // Create the image element
            const img = document.createElement('img');
            img.src = dataUrl as string;
            img.alt = `Preview of ${slug}`;
            img.style.width = '100%';
            img.style.height = '100%';
            img.style.objectFit = 'cover';
            img.style.objectPosition = 'top center';
            
            // Add overlay gradient for better readability
            const overlay = document.createElement('div');
            overlay.className = 'preview-overlay';
            
            // Assemble the preview
            imgWrapper.appendChild(img);
            imgWrapper.appendChild(overlay);
            previewStructure.appendChild(imgWrapper);
            
            // Replace existing content with the new preview
            container.innerHTML = '';
            container.appendChild(previewStructure);
            
            log('Visual preview generated successfully');
            return true;
          }
        } catch (error) {
          log('Visual preview generation failed:', error);
          // We already have a text preview as fallback
          return false;
        }
      }

      // Function to attempt an iframe-based preview
      async function tryIframePreview(slug, container) {
        return new Promise(async (resolve, reject) => {
          try {
            log('Attempting iframe-based preview');
            
            // Import iframe-resizer dynamically
            const iframeResizer = await import('iframe-resizer/js/iframeResizer');
            
            if (!container || !document.body.contains(container)) {
              throw new Error('Container no longer in document');
            }
            
            // Create the preview structure
            const previewStructure = document.createElement('div');
            previewStructure.className = 'preview-structure';
            
            // Create a wrapper for the iframe with circular mask
            const iframeWrapper = document.createElement('div');
            iframeWrapper.className = 'iframe-preview-wrapper';
            
            // Create the iframe
            const iframe = document.createElement('iframe');
            iframe.src = `/musings/${slug}`;
            iframe.className = 'iframe-preview';
            iframe.title = `Preview of ${slug}`;
            iframe.setAttribute('scrolling', 'no');
            iframe.setAttribute('loading', 'lazy');
            
            // Add overlay gradient for better readability
            const overlay = document.createElement('div');
            overlay.className = 'iframe-preview-overlay';
            
            // Add timeout for iframe loading
            const timeout = setTimeout(() => {
              log('Iframe load timed out');
              reject(new Error('Iframe load timed out'));
            }, 5000);
            
            // Handle iframe load
            iframe.onload = () => {
              clearTimeout(timeout);
              
              try {
                // Initialize iframe-resizer
                iframeResizer.iframeResize({
                  log: false,
                  checkOrigin: false,
                  heightCalculationMethod: 'max',
                  resizeFrom: 'parent',
                  scrolling: false,
                  sizeWidth: false,
                  onInit: () => {
                    log('iframe initialized');
                    
                    // Try to inject styles to the iframe content to better display in preview
                    try {
                      const iframeDocument = iframe.contentDocument || iframe.contentWindow?.document;
                      if (iframeDocument) {
                        // Create style element
                        const style = iframeDocument.createElement('style');
                        style.textContent = `
                          body { 
                            zoom: 1.5;
                            padding: 20px 10px;
                            background: var(--color-card-bg, #FFF1E7);
                          }
                          img { 
                            max-width: 100%; 
                            height: auto;
                            display: block;
                            margin: 10px auto;
                          }
                          h1, h2, h3 { margin-top: 10px; }
                          p { margin: 8px 0; }
                        `;
                        iframeDocument.head.appendChild(style);
                      }
                    } catch (styleError) {
                      log('Error injecting styles into iframe:', styleError);
                    }
                  }
                }, iframe);
                
                // Assemble the preview
                iframeWrapper.appendChild(iframe);
                iframeWrapper.appendChild(overlay);
                previewStructure.appendChild(iframeWrapper);
                
                // Replace existing content with the new preview
                container.innerHTML = '';
                container.appendChild(previewStructure);
                
                log('Iframe preview generated successfully');
                resolve(true);
              } catch (error) {
                log('Error setting up iframe-resizer:', error);
                reject(error);
              }
            };
            
            // Handle iframe error
            iframe.onerror = (error) => {
              clearTimeout(timeout);
              log('Iframe load error:', error);
              reject(new Error('Iframe load error'));
            };
            
            // Append iframe to document to start loading
            document.body.appendChild(iframe);
            iframe.style.position = 'absolute';
            iframe.style.left = '-9999px';
            iframe.style.opacity = '0';
            
            // Set a fallback timeout
            setTimeout(() => {
              if (document.body.contains(iframe) && iframe.style.position === 'absolute') {
                document.body.removeChild(iframe);
                reject(new Error('Iframe preview timed out'));
              }
            }, 6000);
          } catch (error) {
            log('Error creating iframe preview:', error);
            reject(error);
          }
        });
      }
    })
    .catch(error => {
      log('Failed to load html-to-image:', error);
      
      // Fallback to text preview only
      document.querySelectorAll('.musings-preview').forEach(preview => {
        const slug = preview.id.replace('preview-', '');
        simplePreview(slug);
      });
    });

  // Simple text preview fallback
  async function simplePreview(slug) {
    try {
      const previewContainer = document.getElementById(`preview-${slug}`);
      if (!previewContainer) return;
      
      previewContainer.innerHTML = '<div class="preview-loading"><div class="loading-spinner"></div><div class="loading-text">Loading content...</div></div>';
      
      // Fetch the post content
      const origin = window.location.origin;
      const url = `${origin}/musings/${slug}`;
      const response = await fetch(url, {
        headers: {
          'Accept': 'text/html'
        },
        credentials: 'same-origin'
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch: ${response.status}`);
      }
      
      const html = await response.text();
      
      // Parse HTML
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      // Try to find the content
      const article = doc.querySelector('article') || 
                      doc.querySelector('main') || 
                      doc.querySelector('.content');
      
      if (!article) {
        throw new Error('No content found');
      }
      
      // Get text content
      let textContent = article.textContent || '';
      
      if (textContent && previewContainer) {
        createTextPreview(previewContainer, textContent);
      } else {
        throw new Error('No content extracted');
      }
    } catch (error) {
      log(`Error in simple preview for ${slug}:`, error);
      const previewContainer = document.getElementById(`preview-${slug}`);
      if (previewContainer) {
        previewContainer.innerHTML = '<div class="preview-fallback">Preview not available</div>';
      }
    }
  }

  // Helper function to create text preview
  function createTextPreview(container, textContent) {
    // Clear the container
    container.innerHTML = '';
    
    // Create the preview structure
    const previewStructure = document.createElement('div');
    previewStructure.className = 'preview-structure';
    
    // Create the text preview
    const textPreview = document.createElement('div');
    textPreview.className = 'text-preview';
    
    // Create the content container
    const textPreviewContent = document.createElement('div');
    textPreviewContent.className = 'text-preview-content';
    
    // Create the title
    const textPreviewTitle = document.createElement('div');
    textPreviewTitle.className = 'text-preview-title';
    textPreviewTitle.textContent = 'Snippet';
    
    // Process the text content
    let cleanedText = textContent.trim();
    cleanedText = cleanedText.replace(/\s+/g, ' ');
    cleanedText = cleanedText.replace(/Skip to content|Main menu|Search|Home|Footer|Copyright|All rights reserved/gi, '');
    
    // Find a good starting point - skip navigation and headers
    let contentStart = 0;
    
    // Look for common patterns that indicate the start of actual content
    const patterns = [
      'A collection of', 
      'In this article', 
      'I have been', 
      'When I think',
      'The concept of',
      'Recently, I',
      'This is',
      'A self-reflective',
      'Today I want',
      'One thing',
      'My thoughts',
      'Looking back'
    ];
    
    for (const pattern of patterns) {
      const index = cleanedText.indexOf(pattern);
      if (index > 0 && index < 200) {
        contentStart = index;
        break;
      }
    }
    
    // If no pattern found, use a reasonable starting point
    if (contentStart === 0) {
      // Find the first period after a reasonable text length
      let periodIndex = cleanedText.indexOf('.', 30);
      
      // If no period found or it's too far, look for other sentence endings
      if (periodIndex < 0 || periodIndex > 200) {
        periodIndex = Math.max(
          cleanedText.indexOf('!', 30),
          cleanedText.indexOf('?', 30),
          cleanedText.indexOf('.', 30)
        );
      }
      
      // Use period as starting point if found, or default to a minimum character position
      contentStart = periodIndex > 30 ? periodIndex + 1 : 30;
      
      // Ensure we're starting at a word boundary
      if (contentStart < cleanedText.length && cleanedText[contentStart] !== ' ') {
        const nextSpace = cleanedText.indexOf(' ', contentStart);
        if (nextSpace > 0) {
          contentStart = nextSpace + 1;
        }
      }
    }
    
    // Extract meaningful preview content
    let truncatedText = cleanedText.substring(contentStart).trim();
    
    // Find a good breaking point
    if (truncatedText.indexOf('.') > 30) {
      const endOfSentence = truncatedText.indexOf('.', 30) + 1;
      if (endOfSentence > 1 && endOfSentence < 160) {
        truncatedText = truncatedText.substring(0, endOfSentence);
      } else {
        truncatedText = truncatedText.substring(0, 140) + '...';
      }
    } else if (truncatedText.length > 140) {
      truncatedText = truncatedText.substring(0, 140) + '...';
    }
    
    // Format the text for better display
    truncatedText = truncatedText.trim();
    
    // If the text is too short, add elipsis to make it look like it continues
    if (truncatedText.length < 80 && !truncatedText.endsWith('...')) {
      truncatedText += '...';
    }
    
    // Create the text body
    const textPreviewBody = document.createElement('p');
    textPreviewBody.className = 'text-preview-body';
    textPreviewBody.textContent = truncatedText;
    
    // Add overlay for gradient effect
    const overlay = document.createElement('div');
    overlay.className = 'preview-overlay';
    
    // Assemble the preview
    textPreviewContent.appendChild(textPreviewTitle);
    textPreviewContent.appendChild(textPreviewBody);
    textPreview.appendChild(textPreviewContent);
    previewStructure.appendChild(textPreview);
    previewStructure.appendChild(overlay);
    
    // Add to container
    container.appendChild(previewStructure);
  }
</script>