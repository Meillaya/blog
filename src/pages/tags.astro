---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Get all posts from all collections
const blogPosts = await getCollection('blog');
const essaysPosts = await getCollection('essays');
const notesPosts = await getCollection('notes');

// Combine all posts
const allPosts = [...blogPosts, ...essaysPosts, ...notesPosts];

// Count tags
const tagCounts = new globalThis.Map<string, number>();
const tagPosts = new globalThis.Map<string, any[]>();

allPosts.forEach(post => {
  const postTags = post.data.tags || [];
  postTags.forEach(tag => {
    tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
    if (!tagPosts.has(tag)) {
      tagPosts.set(tag, []);
    }
    tagPosts.get(tag)!.push(post);
  });
});

// Sort tags by count (descending) and then alphabetically
const sortedTags = globalThis.Array.from(tagCounts.entries())
  .sort(([a, countA], [b, countB]) => {
    if (countA !== countB) {
      return countB - countA;
    }
    return a.localeCompare(b);
  });

const totalPosts = allPosts.length;
const totalTags = sortedTags.length;
---

<Layout title="Tags - meillaya" description="Browse all tags and topics">
  <div class="tags-page">
    <div class="tags-header">
      <h1>Tags</h1>
      <p>Explore topics and themes across all content</p>
      <div class="tags-stats">
        <span class="stat">{totalTags} tags</span>
        <span class="stat">{totalPosts} posts</span>
      </div>
    </div>

    <div class="tags-cloud">
      {sortedTags.map(([tag, count]) => (
        <a 
          href={`/tags/${globalThis.encodeURIComponent(tag.toLowerCase())}`}
          class="tag-item"
          style={`font-size: ${globalThis.Math.min(2, 1 + count * 0.2)}rem;`}
        >
          <span class="tag-name">{tag}</span>
          <span class="tag-count">{count}</span>
        </a>
      ))}
    </div>

    <div class="tags-list">
      <h2>All Tags</h2>
      <div class="tags-grid">
        {sortedTags.map(([tag, count]) => (
          <div class="tag-card">
            <a href={`/tags/${globalThis.encodeURIComponent(tag.toLowerCase())}`} class="tag-link">
              <h3>{tag}</h3>
              <p>{count} post{count !== 1 ? 's' : ''}</p>
                             <div class="tag-collections">
                 <span class="collection-badge">view posts</span>
              </div>
            </a>
          </div>
        ))}
      </div>
    </div>
  </div>
</Layout>

<style>
  .tags-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .tags-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .tags-header h1 {
    font-size: 2.5rem;
    color: var(--color-heading, #333);
    margin-bottom: 1rem;
    font-weight: 700;
  }

  .tags-header p {
    font-size: 1.2rem;
    color: var(--color-text-light, #666);
    margin-bottom: 1.5rem;
  }

  .tags-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .stat {
    background: var(--color-card-bg, #FFF1E7);
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-weight: 600;
    color: var(--color-primary, #6a2fb8);
  }

  .tags-cloud {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 4rem;
    padding: 2rem;
    background: var(--color-card-bg, #FFF1E7);
    border-radius: 16px;
  }

  .tag-item {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--color-card-bg, #FFF1E7);
    border-radius: 25px;
    text-decoration: none;
    color: var(--color-text, #333);
    transition: all 0.3s ease;
    border: 1px solid rgba(0,0,0,0.1);
    font-weight: 500;
  }

  .tag-item:hover {
    background: var(--color-primary, #6a2fb8);
    color: white;
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(106, 47, 184, 0.2);
  }

  .tag-count {
    background: rgba(0, 0, 0, 0.1);
    padding: 0.2rem 0.6rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .tag-item:hover .tag-count {
    background: rgba(255, 255, 255, 0.2);
  }

  .tags-list {
    margin-top: 3rem;
  }

  .tags-list h2 {
    font-size: 1.8rem;
    margin-bottom: 1.5rem;
    color: var(--color-heading, #333);
    position: relative;
    display: inline-block;
    padding-bottom: 0.5rem;
  }

  .tags-list h2::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 60px;
    height: 3px;
    background: var(--color-primary, #6a2fb8);
    border-radius: 3px;
  }

  .tags-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  .tag-card {
    background: var(--color-card-bg, #FFF1E7);
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .tag-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
  }

  .tag-link {
    display: block;
    padding: 1.5rem;
    text-decoration: none;
    color: inherit;
  }

  .tag-card h3 {
    font-size: 1.3rem;
    margin: 0 0 0.5rem;
    color: var(--color-heading, #333);
    font-weight: 600;
  }

  .tag-card p {
    margin: 0 0 1rem;
    color: var(--color-text-light, #666);
    font-size: 0.9rem;
  }

  .tag-collections {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .collection-badge {
    background: var(--color-primary, #6a2fb8);
    color: white;
    padding: 0.2rem 0.6rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
  }

  @media (max-width: 768px) {
    .tags-header h1 {
      font-size: 2rem;
    }

    .tags-stats {
      flex-direction: column;
      align-items: center;
      gap: 1rem;
    }

    .tags-cloud {
      padding: 1rem;
    }

    .tags-grid {
      grid-template-columns: 1fr;
    }
  }
</style> 